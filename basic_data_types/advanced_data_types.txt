Advanced Data Types in Python:

a) array - can compactly represent an array of basic values: characters, 
integers, floating point numbers. Arrays are sequence types and behave very much 
like lists, except that the type of objects stored in them is constrained. The 
type is specified at object creation time by using a type code, which is a 
single character.

b) deque - list-like container with fast appends and pops on either end

c) heapq - This module provides an implementation of the heap queue algorithm, 
also known as the priority queue algorithm.

Heaps are binary trees for which every parent node has a value less than or 
equal to any of its children. This implementation uses arrays for which heap[k] 
<= heap[2*k+1] and heap[k] <= heap[2*k+2] for all k, counting elements from 
zero. For the sake of comparison, non-existing elements are considered to be 
infinite. The interesting property of a heap is that its smallest element is 
always the root, heap[0].

>>> def heapsort(iterable):
...     h = []
...     for value in iterable:
...         heappush(h, value)
...     return [heappop(h) for i in range(len(h))]
...
>>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


