Object - is simply a collection of data (variables) and methods (functions) 
that act on those data. And, class is a blueprint for the object.

Obiekt - to po prostu zbiór danych (zmiennych) i metod (funkcji)
które działają na te dane. A klasa jest planem obiektu.

The object() function - returns an empty object.
You cannot add new properties or methods to this object.
This object is the base for all classes, it holds the built-in properties and 
methods which are default for all classes.

Funkcja object () - zwraca pusty obiekt.
Nie można dodawać nowych właściwości ani metod do tego obiektu.
Ten obiekt jest podstawą wszystkich klas, posiada wbudowane właściwości i
metody, które są domyślne dla wszystkich klas.

*Objects* are Python’s abstraction for data.  All data in a Python
program is represented by objects or by relations between objects. (In
a sense, and in conformance to Von Neumann’s model of a “stored
program computer,” code is also represented by objects.)

Every object has an identity, a type and a value.  An object’s
*identity* never changes once it has been created; you may think of it
as the object’s address in memory.  The ‘"is"’ operator compares the
identity of two objects; the "id()" function returns an integer
representing its identity.

**CPython implementation detail:** For CPython, "id(x)" is the memory
address where "x" is stored.

An object’s type determines the operations that the object supports
(e.g., “does it have a length?”) and also defines the possible values
for objects of that type.  The "type()" function returns an object’s
type (which is an object itself).  Like its identity, an object’s
*type* is also unchangeable. [1]

The *value* of some objects can change.  Objects whose value can
change are said to be *mutable*; objects whose value is unchangeable
once they are created are called *immutable*. (The value of an
immutable container object that contains a reference to a mutable
object can change when the latter’s value is changed; however the
container is still considered immutable, because the collection of
objects it contains cannot be changed.  So, immutability is not
strictly the same as having an unchangeable value, it is more subtle.)
An object’s mutability is determined by its type; for instance,
numbers, strings and tuples are immutable, while dictionaries and
lists are mutable.
